{
  "query": "How to control Chrome browser programmatically on Mac?",
  "response": "To control the Chrome browser programmatically on a Mac, you can use the DevTools protocol, which allows you to automate Chrome using JavaScript. Here are the steps and methods to achieve this:\n\n### 1. Launching Headless Chrome\n\nYou can launch Chrome in headless mode using the command line. Here\u2019s how you can do it:\n\n```bash\nalias chrome=\"/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome\"\nalias chrome-canary=\"/Applications/Google\\ Chrome\\ Canary.app/Contents/MacOS/Google\\ Chrome\\ Canary\"\n\n# Launching headless Chrome\nchrome --headless --disable-gpu --remote-debugging-port=9222 https://www.chromestatus.com\n```\n\nFor a more portable solution, you can use Node.js and the `chrome-remote-interface` package to control the browser programmatically:\n\n```javascript\nconst { CDP } = require('chrome-remote-interface');\n\nasync function launchChrome() {\n  const chrome = await CDP({ port: 9222 });\n  return chrome;\n}\n\nlaunchChrome().then(async chrome => {\n  const version = await chrome.Version({ port: chrome.port });\n  console.log(version['User-Agent']);\n});\n```\n\n### 2. Setting Policies Programmatically\n\nIf you need to enforce policies such as setting the default homepage, you can use Chrome policies. However, setting policies programmatically is more complex and typically involves modifying policy files and applying them through the Google Admin console.\n\nFor example, to set the default homepage programmatically, you would need to configure Chrome policies using JSON files and apply them to enrolled browsers. Here\u2019s an example of how you might modify a policy template:\n\n```json\n{\n  \"policies\": [\n    {\n      \"name\": \"HomepageLocation\",\n      \"type\": \"string\",\n      \"schema\": { \"type\": \"string\" },\n      \"supported_on\": [\"chrome.*:8-\", \"chrome_os:11-\"],\n      \"features\": {\n        \"can_be_recommended\": true,\n        \"dynamic_refresh\": true,\n        \"per_profile\": true\n      },\n      \"future\": \"chrome://apps\",\n      \"example_value\": \"http://chromium.org\",\n      \"id\": 1,\n      \"caption\": \"Configure the home page URL\",\n      \"desc\": \"Configures the default home page URL in Google Chrome and prevents users from changing it.\"\n    }\n  ]\n}\n```\n\nHowever, applying these policies programmatically requires administrative access and involves more complex steps than simple automation using the DevTools protocol[4].\n\n### 3. Using Extensions\n\nIf you need more advanced control over Chrome's behavior, you can create Chrome extensions. Extensions allow you to define custom commands and actions that can be triggered programmatically. Here\u2019s an example of how you might define a command in an extension's `manifest.json`:\n\n```json\n{\n  \"name\": \"My Extension\",\n  \"version\": \"1.0\",\n  \"commands\": {\n    \"run-foo\": {\n      \"suggested_key\": {\n        \"default\": \"Ctrl+Shift+Y\",\n        \"mac\": \"Command+Shift+Y\"\n      },\n      \"description\": \"Run 'foo' on the current page.\"\n    }\n  }\n}\n```\n\nYou can then bind handlers to these commands in your extension's background script[3].\n\n### Summary\n\n- **Headless Automation**: Use `chrome-remote-interface` to control Chrome programmatically.\n- **Policy Configuration**: Modify policy templates and apply them through the Google Admin console for more complex settings.\n- **Extension Development**: Create custom extensions to define and trigger commands programmatically.\n\nEach method has its own use case and complexity level, so choose the one that best fits your needs.",
  "model": "llama-3.1-sonar-small-128k-online",
  "tokens": 801,
  "timestamp": "2024-11-26T12:29:38.807519"
}